name: Build master

on:
  push:
    branches:
      - master
jobs:
  build:
    runs-on: ubuntu-latest

    services:
      db:
        image: postgres:10
        ports: ["5432:5432"]
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v1

      - uses: actions/setup-elixir@v1.1.0
        with:
          otp-version: 22.x
          elixir-version: 1.9.x

      - uses: actions/cache@v1
        with:
          path: services/app/deps
          key: ${{ runner.os }}-deps-${{ hashFiles(format('{0}{1}', github.workspace, '/services/app/mix.lock')) }}
          restore-keys: |
            ${{ runner.os }}-deps-

      - uses: actions/cache@v1
        with:
          path: services/app/_build
          key: ${{ runner.os }}-build-${{ hashFiles(format('{0}{1}', github.workspace, '/services/app/mix.lock')) }}
          restore-keys: |
            ${{ runner.os }}-build-

      - uses: actions/cache@v1
        with:
          path: ~/.mix
          key: ${{ runner.os }}-mix-${{ hashFiles(format('{0}{1}', github.workspace, '/services/app/mix.lock')) }}
          restore-keys: |
            ${{ runner.os }}-mix-

      - name: Get deps
        run: mix deps.get
        working-directory: ./services/app

      - name: Mix format
        run: mix format --check-formatted
        working-directory: ./services/app
        env:
          MIX_ENV: test

      - name: Mix credo
        run: mix credo
        working-directory: ./services/app
        env:
          MIX_ENV: test

      - name: Get yarn cache
        id: yarn-cache
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - uses: actions/cache@v1
        with:
          path: ${{ steps.yarn-cache.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Install yarn dependencies
        run: yarn install --froze-lockfile
        working-directory: ./services/app

      - name: Eslint
        run: yarn lint
        working-directory: ./services/app

      - name: Setup db
        run: mix ecto.create && mix ecto.migrate
        working-directory: ./services/app
        env:
          MIX_ENV: test

      - run: make test

      - name: Codecov
        run: ./.codecov.bash
        working-directory: ./services/app
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

      - name: Pull dockers
        run: |
          docker pull codebattle/js:11.6.0
          docker pull codebattle/ts:3.5.2
          docker pull codebattle/golang:1.12.6
          docker pull codebattle/cpp:17
          docker pull codebattle/ruby:2.6.0
          docker pull codebattle/elixir:1.7.3
          docker pull codebattle/python:3.7.2
          docker pull codebattle/php:7.3.0
          docker pull codebattle/clojure:1.10.0
          docker pull codebattle/haskell:8.4.3
          docker pull codebattle/perl:5.26.2

      - name: Run code checkers tests
        run: make test-code-checkers
        env:
          MIX_ENV: test

