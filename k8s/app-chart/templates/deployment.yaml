---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: "{{ .Release.Name }}-deployment"
  labels:
    app.kubernetes.io/name: "{{ .Release.Name }}-web-deployment"
    app.kubernetes.io/instance: "{{ .Release.Name }}"
    app.kubernetes.io/version: "{{ .Chart.AppVersion }}"
    app.kubernetes.io/managed-by: "{{ .Release.Service }}"
    helm.sh/chart: "{{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}"
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app.kubernetes.io/name: "{{ .Release.Name }}-web-pod"
      app.kubernetes.io/instance: "{{ .Release.Name }}"
  strategy:
    rollingUpdate:
      maxUnavailable: 0
      maxSurge: 1
  template:
    metadata:
      labels:
        app.kubernetes.io/name: "{{ .Release.Name }}-web-pod"
        app.kubernetes.io/instance: "{{ .Release.Name }}"
    spec:
      volumes:
        - name: users-code-path
          hostPath:
            path: /tmp/codebattle-check
        - name: docker-sock
          hostPath:
            path: /var/run/docker.sock
    {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
    {{- end }}
      containers:
        - name: nginx
          imagePullPolicy: "{{ .Values.nginx.image.imagePullPolicy }}"
          image: "{{ .Values.nginx.image.repository }}"
          readinessProbe:
            httpGet:
              path: /
              port: 8080
            initialDelaySeconds: 5
            periodSeconds: 5
            successThreshold: 1
          ports:
            - containerPort: 8080
          env:
            - name: NGINX_SERVER_ADDRESS
              value: 127.0.0.1
        - name: app
          securityContext:
            privileged: true
          imagePullPolicy: "{{ .Values.app.image.imagePullPolicy }}"
          image: "{{ .Values.app.image.repository }}:{{ .Values.version }}"
          readinessProbe:
            httpGet:
              path: /
              port: 4000
            initialDelaySeconds: 5
            periodSeconds: 5
            successThreshold: 1
          command:
            - make
            - start
          ports:
            - containerPort: 4000
          volumeMounts:
            - mountPath: /tmp/codebattle-check
              name: users-code-path
            - mountPath: /var/run/docker.sock
              name: docker-sock
          envFrom:
            - secretRef:
                name: codebattle-secrets
          env:
            - name: CODEBATTLE_VERSION
              value: {{ .Values.version }}
            - name: CODEBATTLE_PORT
              value: "4000"
            - name: DEPLOYED_AT
              value: "{{ now }}"
