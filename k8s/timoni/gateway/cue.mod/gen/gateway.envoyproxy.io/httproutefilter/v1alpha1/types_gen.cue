// Code generated by timoni. DO NOT EDIT.

//timoni:generate timoni vendor crd -f https://github.com/envoyproxy/gateway/releases/download/v1.3.0/install.yaml

package v1alpha1

import "strings"

// HTTPRouteFilter is a custom Envoy Gateway HTTPRouteFilter which
// provides extended
// traffic processing options such as path regex rewrite, direct
// response and more.
#HTTPRouteFilter: {
	// APIVersion defines the versioned schema of this representation
	// of an object.
	// Servers should convert recognized schemas to the latest
	// internal value, and
	// may reject unrecognized values.
	// More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	apiVersion: "gateway.envoyproxy.io/v1alpha1"

	// Kind is a string value representing the REST resource this
	// object represents.
	// Servers may infer this from the endpoint the client submits
	// requests to.
	// Cannot be updated.
	// In CamelCase.
	// More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	kind: "HTTPRouteFilter"
	metadata!: {
		name!: strings.MaxRunes(253) & strings.MinRunes(1) & {
			string
		}
		namespace!: strings.MaxRunes(63) & strings.MinRunes(1) & {
			string
		}
		labels?: {
			[string]: string
		}
		annotations?: {
			[string]: string
		}
	}

	// Spec defines the desired state of HTTPRouteFilter.
	spec!: #HTTPRouteFilterSpec
}

// Spec defines the desired state of HTTPRouteFilter.
#HTTPRouteFilterSpec: {
	// HTTPDirectResponseFilter defines the configuration to return a
	// fixed response.
	directResponse?: {
		// Body of the Response
		body?: {
			// Inline contains the value as an inline string.
			inline?: string

			// Type is the type of method to use to read the body value.
			// Valid values are Inline and ValueRef, default is Inline.
			type!: matchN(2, ["Inline" | "ValueRef", "Inline" | "ValueRef"]) | *"Inline"

			// ValueRef contains the contents of the body
			// specified as a local object reference.
			// Only a reference to ConfigMap is supported.
			//
			// The value of key `response.body` in the ConfigMap will be used
			// as the response body.
			// If the key is not found, the first value in the ConfigMap will
			// be used.
			valueRef?: {
				// Group is the group of the referent. For example,
				// "gateway.networking.k8s.io".
				// When unspecified or empty string, core API group is inferred.
				group!: strings.MaxRunes(253) & {
					=~"^$|^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$"
				}

				// Kind is kind of the referent. For example "HTTPRoute" or
				// "Service".
				kind!: strings.MaxRunes(63) & strings.MinRunes(1) & {
					=~"^[a-zA-Z]([-a-zA-Z0-9]*[a-zA-Z0-9])?$"
				}

				// Name is the name of the referent.
				name!: strings.MaxRunes(253) & strings.MinRunes(1)
			}
		}

		// Content Type of the response. This will be set in the
		// Content-Type header.
		contentType?: string

		// Status Code of the HTTP response
		// If unset, defaults to 200.
		statusCode?: int
	}

	// HTTPURLRewriteFilter define rewrites of HTTP URL components
	// such as path and host
	urlRewrite?: {
		// Hostname is the value to be used to replace the Host header
		// value during
		// forwarding.
		hostname?: {
			// Header is the name of the header whose value would be used to
			// rewrite the Host header
			header?: string

			// HTTPPathModifierType defines the type of Hostname rewrite.
			type!: "Header" | "Backend"
		}

		// Path defines a path rewrite.
		path?: {
			// ReplaceRegexMatch defines a path regex rewrite. The path
			// portions matched by the regex pattern are replaced by the
			// defined substitution.
			// https://www.envoyproxy.io/docs/envoy/latest/api-v3/config/route/v3/route_components.proto#envoy-v3-api-field-config-route-v3-routeaction-regex-rewrite
			// Some examples:
			// (1) replaceRegexMatch:
			// pattern: ^/service/([^/]+)(/.*)$
			// substitution: \2/instance/\1
			// Would transform /service/foo/v1/api into /v1/api/instance/foo.
			// (2) replaceRegexMatch:
			// pattern: one
			// substitution: two
			// Would transform /xxx/one/yyy/one/zzz into /xxx/two/yyy/two/zzz.
			// (3) replaceRegexMatch:
			// pattern: ^(.*?)one(.*)$
			// substitution: \1two\2
			// Would transform /xxx/one/yyy/one/zzz into /xxx/two/yyy/one/zzz.
			// (3) replaceRegexMatch:
			// pattern: (?i)/xxx/
			// substitution: /yyy/
			// Would transform path /aaa/XxX/bbb into /aaa/yyy/bbb
			// (case-insensitive).
			replaceRegexMatch?: {
				// Pattern matches a regular expression against the value of the
				// HTTP Path.The regex string must
				// adhere to the syntax documented in
				// https://github.com/google/re2/wiki/Syntax.
				pattern!: strings.MinRunes(1)

				// Substitution is an expression that replaces the matched
				// portion.The expression may include numbered
				// capture groups that adhere to syntax documented in
				// https://github.com/google/re2/wiki/Syntax.
				substitution!: string
			}

			// HTTPPathModifierType defines the type of path redirect or
			// rewrite.
			type!: "ReplaceRegexMatch"
		}
	}
}
