// Code generated by timoni. DO NOT EDIT.

//timoni:generate timoni vendor crd -f https://github.com/envoyproxy/gateway/releases/download/v1.3.0/install.yaml

package v1alpha2

import (
	"strings"
	"list"
)

// BackendLBPolicy provides a way to define load balancing rules
// for a backend.
#BackendLBPolicy: {
	// APIVersion defines the versioned schema of this representation
	// of an object.
	// Servers should convert recognized schemas to the latest
	// internal value, and
	// may reject unrecognized values.
	// More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	apiVersion: "gateway.networking.k8s.io/v1alpha2"

	// Kind is a string value representing the REST resource this
	// object represents.
	// Servers may infer this from the endpoint the client submits
	// requests to.
	// Cannot be updated.
	// In CamelCase.
	// More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	kind: "BackendLBPolicy"
	metadata!: {
		name!: strings.MaxRunes(253) & strings.MinRunes(1) & {
			string
		}
		namespace!: strings.MaxRunes(63) & strings.MinRunes(1) & {
			string
		}
		labels?: {
			[string]: string
		}
		annotations?: {
			[string]: string
		}
	}

	// Spec defines the desired state of BackendLBPolicy.
	spec!: #BackendLBPolicySpec
}

// Spec defines the desired state of BackendLBPolicy.
#BackendLBPolicySpec: {
	// SessionPersistence defines and configures session persistence
	// for the backend.
	//
	// Support: Extended
	sessionPersistence?: {
		// AbsoluteTimeout defines the absolute timeout of the persistent
		// session. Once the AbsoluteTimeout duration has elapsed, the
		// session becomes invalid.
		//
		// Support: Extended
		absoluteTimeout?: =~"^([0-9]{1,5}(h|m|s|ms)){1,4}$"
		cookieConfig?: {
			// LifetimeType specifies whether the cookie has a permanent or
			// session-based lifetime. A permanent cookie persists until its
			// specified expiry time, defined by the Expires or Max-Age cookie
			// attributes, while a session cookie is deleted when the current
			// session ends.
			//
			// When set to "Permanent", AbsoluteTimeout indicates the
			// cookie's lifetime via the Expires or Max-Age cookie attributes
			// and is required.
			//
			// When set to "Session", AbsoluteTimeout indicates the
			// absolute lifetime of the cookie tracked by the gateway and
			// is optional.
			//
			// Support: Core for "Session" type
			//
			// Support: Extended for "Permanent" type
			lifetimeType?: "Permanent" | "Session" | *"Session"
		}

		// IdleTimeout defines the idle timeout of the persistent session.
		// Once the session has been idle for more than the specified
		// IdleTimeout duration, the session becomes invalid.
		//
		// Support: Extended
		idleTimeout?: =~"^([0-9]{1,5}(h|m|s|ms)){1,4}$"

		// SessionName defines the name of the persistent session token
		// which may be reflected in the cookie or the header. Users
		// should avoid reusing session names to prevent unintended
		// consequences, such as rejection or unpredictable behavior.
		//
		// Support: Implementation-specific
		sessionName?: strings.MaxRunes(128)

		// Type defines the type of session persistence such as through
		// the use a header or cookie. Defaults to cookie based session
		// persistence.
		//
		// Support: Core for "Cookie" type
		//
		// Support: Extended for "Header" type
		type?: "Cookie" | "Header" | *"Cookie"
	}

	// TargetRef identifies an API object to apply policy to.
	// Currently, Backends (i.e. Service, ServiceImport, or any
	// implementation-specific backendRef) are the only valid API
	// target references.
	targetRefs!: list.MaxItems(16) & [...{
		// Group is the group of the target resource.
		group!: strings.MaxRunes(253) & {
			=~"^$|^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$"
		}

		// Kind is kind of the target resource.
		kind!: strings.MaxRunes(63) & strings.MinRunes(1) & {
			=~"^[a-zA-Z]([-a-zA-Z0-9]*[a-zA-Z0-9])?$"
		}

		// Name is the name of the target resource.
		name!: strings.MaxRunes(253) & strings.MinRunes(1)
	}] & [_, ...]
}
