package main

import (
	"encoding/json"
	"fmt"
	"os"
	"reflect"
)

func main() {
  defer func() {
  	if err := recover(); err != nil {
  		sendMessage("error", fmt.Sprintf("%s", err), nil)
  	}
  	os.Exit(0)
  }()
  
  success := true

  <%= for %{arguments: arguments, expected: expected, index: i} <- checks do %>
    <%= for %{defining: defining, value: value} <- arguments.info do %>
      var <%= defining %> = <%= value %>
    <% end %>
    var <%= expected.defining %> = <%= expected.value %>

    success = assertSolution(solution(<%= arguments.expression %>), expected<%= i %>, []interface{}{<%= arguments.expression %>}, success)
  <% end %>

  if success {
    sendMessage("ok", <%= hash_sum %>, nil)
  }
}

type resultMessage struct {
	Status    string      `json:"status"`
	Result    interface{} `json:"result"`
	Arguments interface{} `json:"arguments,omitempty"`
}

func assertSolution(result, expected, message interface{}, success bool) bool {
	status := reflect.DeepEqual(result, expected)
	if !status {
		sendFailureMessage("failure", result, message)
		return false
	}

	return success
}

func sendMessage(status string, result, arguments interface{}) {
	message := ResultMessage{
		Status:    status,
		Result:    result,
		Arguments: arguments,
	}

	jsonMessage, err := json.Marshal(message)
	if err != nil {
		fmt.Println("Marshaler error")
		os.Exit(0)
	}

	fmt.Print(string(jsonMessage))
}
