<%= f = form_for(@changeset, @action, class: 'col-8 offset-2') %>
<div class="form-group">
  <%= render_base_errors(@changeset.errors[:base]) %>
</div>
<div class="form-group">
  <span>Name</span>
  <span class="ml-3 text-muted">Name for task, sould be uniq</span>
  <%= text_input(f, :name, class: "form-control form-control-lg", maxlength: "37", required: false) %>
  <%= error_tag(f, :name) %>
</div>
<div class="form-group">
  <%= label(f, :level) %>
  <%= select(f, :level, Codebattle.Task.levels(), class: "form-control form-control-lg") %>
  <%= error_tag(f, :level) %>
</div>
<div class="form-group">
  <%= label(f, :visibility) %>
  <%= select(f, :visibility, Codebattle.Task.visibility_types(),
    class: "form-control form-control-lg"
  ) %>
  <%= error_tag(f, :visibility) %>
</div>
<div class="form-group">
  <div class="d-flex flex-column">
    <span>Tags(what's your task about), you can create your own.</span>
    <span>
      Existing_tags: <%= Codebattle.Task.list_all_tags() |> Enum.join(", ") %>
    </span>
    <span class="text-muted">Example: math,regex,asdf</span>
  </div>
  <%= text_input(f, :tags, value: render_tags(f.data), class: "form-control
  form-control-lg", maxlength: "37", required: false) %>
  <%= error_tag(
    f,
    :tags
  ) %>
</div>
<div class="form-group">
  <div class="d-flex flex-column">
    <span>Examples in markdown (some examples of using solution function)</span>
    <span class="text-muted">Example: 2 == solution(1,1)</span>
  </div>
  <%= textarea(f, :examples, class: "form-control form-control-lg", required: false) %>
  <%= error_tag(f, :examples) %>
</div>
<div class="form-group">
  <%= label(f, :description_en) %>
  <%= textarea(f, :description_en,
    class: "form-control form-control-lg",
    required: false
  ) %>
  <%= error_tag(
    f,
    :description_en
  ) %>
</div>
<div class="form-group">
  <%= label(f, :description_ru) %>
  <%= textarea(f, :description_ru,
    class: "form-control form-control-lg",
    required: false
  ) %>
  <%= error_tag(
    f,
    :description_ru
  ) %>
</div>
<div class="form-group">
  <div class="d-flex flex-column">
    <span>Asserts JSON list of objects</span>
    <span class="text-muted">Example:</span>
    <span class="text-muted">[{"arguments":[1,1],"expected":2},</span>
    <span class="text-muted">{"arguments":[3,7],"expected":10}]</span>
  </div>
  <%= textarea(f, :asserts,
    value: Jason.encode!(@changeset.data.asserts),
    class: "form-control form-control-lg",
    required: false
  ) %>
  <%= error_tag(
    f,
    :asserts
  ) %>
</div>

<div class="form-group">
  <div class="d-flex flex-column">
    <span>
      Input_signature (json with function type signature)&nbsp;
      <a href="https://github.com/hexlet-codebattle/battle_asserts/blob/master/test/battle_asserts/helper_test.clj#L31">
        See: example
      </a>
    </span>
    <span class="text-muted">Example:</span>
    <span class="text-muted">
      [{"argument_name":"a","type":{"name":"integer"}},{"argument_name":"b","type":{"name":"integer"}}]
    </span>
  </div>
  <%= textarea(f, :input_signature,
    value: Jason.encode!(@changeset.data.input_signature),
    class: "form-control
  form-control-lg"
  ) %> <%= error_tag(f, :input_signature) %>
</div>

<div class="form-group">
  <div class="d-flex flex-column">
    <span>
      Output_signature (json with output type)&nbsp;
      <a href="https://github.com/hexlet-codebattle/battle_asserts/blob/master/test/battle_asserts/helper_test.clj#L31">
        See: url
      </a>
    </span>
    <span class="text-muted">Example:</span>
    <span class="text-muted">{"type":{"name":"integer"}}</span>
  </div>

  <%= textarea(f, :output_signature,
    value: Jason.encode!(@changeset.data.output_signature),
    class: "form-control
  form-control-lg"
  ) %> <%= error_tag(f, :output_signature) %>
</div>

<div class="d-flex">
  <%= submit("Save", phx_disable_with: "Saving...", class: "btn btn-success mb-2") %>
  <%= link("Back", to: Routes.task_path(@conn, :index), class: "ml-auto") %>
</div>
