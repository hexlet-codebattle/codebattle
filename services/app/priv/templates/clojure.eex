(try
  (load-file "check/solution.clj")
  (catch Exception ex
    (do
     (println (json/write-str {:status "error" :result (.getMessage ex)}))
     (System/exit 0)
     )))

(defn assert_result
  [expected result errorMessage]
  (try (assert (= expected result))
       (println (json/write-str {:status "success" :result result}))
       true
       (catch java.lang.AssertionError e
         (do
           (println (json/write-str {:status "failure" :result result :arguments errorMessage}))
           false
           ))))

(defn get_test_status [status_test status_assert]
  (if status_test
    (if status_assert
      status_test
      status_assert
      )
    status_test))

(defn generate-tests
  [solution]
  (let [success
        (reduce get_test_status
          [
            <%= for %{arguments: arguments, expected: expected } <- checks do %>
              (assert_result <%= expected %> (apply solution [<%= arguments %>]), [<%= arguments %>])
            <% end %>
          ])]
    (if success
      (println (json/write-str {:status "ok" :result <%= hash_sum %>})))))

