import 'package:test/test.dart';
import 'package:dart_json/dart_json.dart';
import 'dart:async';

import 'package:check/solution.dart';

void main() {
  test("Run Asserts", () {
    bool success_ = true;
    var asserts_ = [];
    var output_ = "";

    var startTime_;
    var result_;
    var executionTime_;

    try {
      runZoned(() {
      <%= for %{arguments: arguments, expected: expected} <- checks do %>
        startTime_ = new DateTime.now().millisecondsSinceEpoch;
        result_ = solution(<%= arguments %>);
        executionTime_ = new DateTime.now().millisecondsSinceEpoch - startTime_;
        success_ = assert_solution(result_, <%= expected %>, [<%= arguments %>], output_, asserts_, executionTime_, success_);
        output_ = "";
      <% end %>
      }, zoneSpecification: new ZoneSpecification(
        print: (Zone self, ZoneDelegate parent, Zone zone, String line) {
          output_ += line + "\n";
        }
      ));

    asserts_.forEach(
      (message) => print_message(message)
    );

    if (success_) {
      print_message({'status': 'ok', 'result': <%= hash_sum %>});
    }

    } catch (e) {
      print(output_);
      print(e);
      print_message({
        'status': 'error',
        'result': e
      });
    }
  });
}

bool assert_solution(result, expected, arguments, output, asserts, executionTime, success) {
  try {
    expect(expected, equals(result));
    asserts.add({
      'status': 'success',
      'result': result,
      'output': output,
      'expected': expected,
      'arguments': arguments,
      'execution_time': executionTime
    });
  } catch (e) {
    asserts.add({
      'status': 'failure',
      'result': result,
      'output': output,
      'expected': expected,
      'arguments': arguments,
      'execution_time': executionTime
    });
    return false;
  }

  return success;
}

void print_message(obj) {
  print(Json.serialize(obj));
}
