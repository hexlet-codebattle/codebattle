#include <iostream>
#include <vector>
#include <map>

#include "../json.hpp"
#include "../fifo_map.hpp"

#include "solution.cpp"

using namespace std;

template<class K, class V, class dummy_compare, class A>
using fifo_map = nlohmann::fifo_map<K, V, nlohmann::fifo_map_compare<K>, A>;
using json = nlohmann::basic_json<fifo_map>;

template <typename T>
void SendFailureMessage(string status, T result, string message) {
  json j;
  j["status"] = status;
  j["result"] = result;
  j["arguments"] = message;

  cout << j << "\n";
}

template <typename T>
bool AssertSolution(T result, T expected, string message, bool success){
  bool status = result == expected;
  if (status == false) {
    SendFailureMessage("failure", result, message);
    return false;
  }
  return success;
}

template <typename T>
void SendMessage(string status, T result) {
  json j;
  j["status"] = status;
  j["result"] = result;

  cout << j << "\n";
}

int main() {
  bool success = true;

  <%= for %{arguments: arguments, expected: expected, index: i, error_message: message } <- checks do %>
    <%= for %{defining: defining, value: value} <- arguments.info do %>
      <%= defining %> = <%= value %>;
    <% end %>
    <%= expected.defining %> = <%= expected.value %>;

    success = AssertSolution(solution(<%= arguments.expression %>), expected<%= i %>, "[<%= message %>]", success);
  <% end %>

  if (success) {
    SendMessage("ok", <%= hash_sum %>);
  }
}
